
SensorAcidenteUltimateVersion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  20000004  08002a20  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000fc  08002a20  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f023  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f24  00000000  00000000  0002f04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000870  00000000  00000000  00030f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004721  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b66  00000000  00000000  00036691  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000391f7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c80  00000000  00000000  00039274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029a4 	.word	0x080029a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080029a4 	.word	0x080029a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f80e 	bl	8000252 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f000 f807 	bl	8000248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b082      	sub	sp, #8
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800025a:	f001 fb7b 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 800025e:	0002      	movs	r2, r0
 8000260:	23fa      	movs	r3, #250	; 0xfa
 8000262:	0099      	lsls	r1, r3, #2
 8000264:	0010      	movs	r0, r2
 8000266:	f7ff ff4f 	bl	8000108 <__udivsi3>
 800026a:	0003      	movs	r3, r0
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f8e9 	bl	8000444 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000272:	6879      	ldr	r1, [r7, #4]
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	2200      	movs	r2, #0
 800027a:	0018      	movs	r0, r3
 800027c:	f000 f8cc 	bl	8000418 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000280:	2300      	movs	r3, #0
}
 8000282:	0018      	movs	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  uwTick++;
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_IncTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <HAL_IncTick+0x14>)
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000020 	.word	0x20000020

080002a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  return uwTick;
 80002a8:	4b02      	ldr	r3, [pc, #8]	; (80002b4 <HAL_GetTick+0x10>)
 80002aa:	681b      	ldr	r3, [r3, #0]
}
 80002ac:	0018      	movs	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000020 	.word	0x20000020

080002b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c0:	f7ff fff0 	bl	80002a4 <HAL_GetTick>
 80002c4:	0003      	movs	r3, r0
 80002c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	d002      	beq.n	80002d8 <HAL_Delay+0x20>
  {
     wait++;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	f7ff ffe3 	bl	80002a4 <HAL_GetTick>
 80002de:	0002      	movs	r2, r0
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3f7      	bcc.n	80002da <HAL_Delay+0x22>
  {
  }
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b004      	add	sp, #16
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b5b0      	push	{r4, r5, r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	0002      	movs	r2, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b7f      	cmp	r3, #127	; 0x7f
 8000308:	d932      	bls.n	8000370 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	4c2f      	ldr	r4, [pc, #188]	; (80003c8 <NVIC_SetPriority+0xd4>)
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	001a      	movs	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4013      	ands	r3, r2
 8000316:	3b08      	subs	r3, #8
 8000318:	0899      	lsrs	r1, r3, #2
 800031a:	4a2b      	ldr	r2, [pc, #172]	; (80003c8 <NVIC_SetPriority+0xd4>)
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	0018      	movs	r0, r3
 8000322:	230f      	movs	r3, #15
 8000324:	4003      	ands	r3, r0
 8000326:	3b08      	subs	r3, #8
 8000328:	089b      	lsrs	r3, r3, #2
 800032a:	3306      	adds	r3, #6
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	18d3      	adds	r3, r2, r3
 8000330:	3304      	adds	r3, #4
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1dfa      	adds	r2, r7, #7
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	0010      	movs	r0, r2
 800033a:	2203      	movs	r2, #3
 800033c:	4002      	ands	r2, r0
 800033e:	00d2      	lsls	r2, r2, #3
 8000340:	20ff      	movs	r0, #255	; 0xff
 8000342:	4090      	lsls	r0, r2
 8000344:	0002      	movs	r2, r0
 8000346:	43d2      	mvns	r2, r2
 8000348:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	019b      	lsls	r3, r3, #6
 800034e:	20ff      	movs	r0, #255	; 0xff
 8000350:	4018      	ands	r0, r3
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	001d      	movs	r5, r3
 8000358:	2303      	movs	r3, #3
 800035a:	402b      	ands	r3, r5
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	4098      	lsls	r0, r3
 8000360:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000362:	431a      	orrs	r2, r3
 8000364:	1d8b      	adds	r3, r1, #6
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	18e3      	adds	r3, r4, r3
 800036a:	3304      	adds	r3, #4
 800036c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800036e:	e027      	b.n	80003c0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4c16      	ldr	r4, [pc, #88]	; (80003cc <NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b25b      	sxtb	r3, r3
 8000378:	089b      	lsrs	r3, r3, #2
 800037a:	4914      	ldr	r1, [pc, #80]	; (80003cc <NVIC_SetPriority+0xd8>)
 800037c:	1dfa      	adds	r2, r7, #7
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	b252      	sxtb	r2, r2
 8000382:	0892      	lsrs	r2, r2, #2
 8000384:	32c0      	adds	r2, #192	; 0xc0
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	5852      	ldr	r2, [r2, r1]
 800038a:	1df9      	adds	r1, r7, #7
 800038c:	7809      	ldrb	r1, [r1, #0]
 800038e:	0008      	movs	r0, r1
 8000390:	2103      	movs	r1, #3
 8000392:	4001      	ands	r1, r0
 8000394:	00c9      	lsls	r1, r1, #3
 8000396:	20ff      	movs	r0, #255	; 0xff
 8000398:	4088      	lsls	r0, r1
 800039a:	0001      	movs	r1, r0
 800039c:	43c9      	mvns	r1, r1
 800039e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	0192      	lsls	r2, r2, #6
 80003a4:	20ff      	movs	r0, #255	; 0xff
 80003a6:	4010      	ands	r0, r2
 80003a8:	1dfa      	adds	r2, r7, #7
 80003aa:	7812      	ldrb	r2, [r2, #0]
 80003ac:	0015      	movs	r5, r2
 80003ae:	2203      	movs	r2, #3
 80003b0:	402a      	ands	r2, r5
 80003b2:	00d2      	lsls	r2, r2, #3
 80003b4:	4090      	lsls	r0, r2
 80003b6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b8:	430a      	orrs	r2, r1
 80003ba:	33c0      	adds	r3, #192	; 0xc0
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	511a      	str	r2, [r3, r4]
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bdb0      	pop	{r4, r5, r7, pc}
 80003c8:	e000ed00 	.word	0xe000ed00
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <SysTick_Config+0x40>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d901      	bls.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e010      	b.n	8000408 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <SysTick_Config+0x44>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	3a01      	subs	r2, #1
 80003ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	2301      	movs	r3, #1
 80003f0:	425b      	negs	r3, r3
 80003f2:	2103      	movs	r1, #3
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff ff7d 	bl	80002f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SysTick_Config+0x44>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <SysTick_Config+0x44>)
 8000402:	2207      	movs	r2, #7
 8000404:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000406:	2300      	movs	r3, #0
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	00ffffff 	.word	0x00ffffff
 8000414:	e000e010 	.word	0xe000e010

08000418 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	230f      	movs	r3, #15
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	1c02      	adds	r2, r0, #0
 8000428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	230f      	movs	r3, #15
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b25b      	sxtb	r3, r3
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff5c 	bl	80002f4 <NVIC_SetPriority>
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bd80      	pop	{r7, pc}

08000444 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff ffbe 	bl	80003d0 <SysTick_Config>
 8000454:	0003      	movs	r3, r0
}
 8000456:	0018      	movs	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b04      	cmp	r3, #4
 800046c:	d106      	bne.n	800047c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000472:	6812      	ldr	r2, [r2, #0]
 8000474:	2104      	movs	r1, #4
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800047a:	e005      	b.n	8000488 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000480:	6812      	ldr	r2, [r2, #0]
 8000482:	2104      	movs	r1, #4
 8000484:	438a      	bics	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000498:	f000 f803 	bl	80004a2 <HAL_SYSTICK_Callback>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004c2:	e14f      	b.n	8000764 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	697a      	ldr	r2, [r7, #20]
 80004cc:	4091      	lsls	r1, r2
 80004ce:	000a      	movs	r2, r1
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d100      	bne.n	80004dc <HAL_GPIO_Init+0x30>
 80004da:	e140      	b.n	800075e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d003      	beq.n	80004ec <HAL_GPIO_Init+0x40>
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2b12      	cmp	r3, #18
 80004ea:	d123      	bne.n	8000534 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	08da      	lsrs	r2, r3, #3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3208      	adds	r2, #8
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	58d3      	ldr	r3, [r2, r3]
 80004f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	2207      	movs	r2, #7
 80004fe:	4013      	ands	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	220f      	movs	r2, #15
 8000504:	409a      	lsls	r2, r3
 8000506:	0013      	movs	r3, r2
 8000508:	43da      	mvns	r2, r3
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	691a      	ldr	r2, [r3, #16]
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	2107      	movs	r1, #7
 8000518:	400b      	ands	r3, r1
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	409a      	lsls	r2, r3
 800051e:	0013      	movs	r3, r2
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	4313      	orrs	r3, r2
 8000524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	08da      	lsrs	r2, r3, #3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3208      	adds	r2, #8
 800052e:	0092      	lsls	r2, r2, #2
 8000530:	6939      	ldr	r1, [r7, #16]
 8000532:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	2203      	movs	r2, #3
 8000540:	409a      	lsls	r2, r3
 8000542:	0013      	movs	r3, r2
 8000544:	43da      	mvns	r2, r3
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	4013      	ands	r3, r2
 800054a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2203      	movs	r2, #3
 8000552:	401a      	ands	r2, r3
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	409a      	lsls	r2, r3
 800055a:	0013      	movs	r3, r2
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	4313      	orrs	r3, r2
 8000560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d00b      	beq.n	8000588 <HAL_GPIO_Init+0xdc>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d007      	beq.n	8000588 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800057c:	2b11      	cmp	r3, #17
 800057e:	d003      	beq.n	8000588 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b12      	cmp	r3, #18
 8000586:	d130      	bne.n	80005ea <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2203      	movs	r2, #3
 8000594:	409a      	lsls	r2, r3
 8000596:	0013      	movs	r3, r2
 8000598:	43da      	mvns	r2, r3
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	4013      	ands	r3, r2
 800059e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	409a      	lsls	r2, r3
 80005aa:	0013      	movs	r3, r2
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005be:	2201      	movs	r2, #1
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0013      	movs	r3, r2
 80005c6:	43da      	mvns	r2, r3
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	4013      	ands	r3, r2
 80005cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	2201      	movs	r2, #1
 80005d6:	401a      	ands	r2, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	409a      	lsls	r2, r3
 80005dc:	0013      	movs	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2203      	movs	r2, #3
 80005f6:	409a      	lsls	r2, r3
 80005f8:	0013      	movs	r3, r2
 80005fa:	43da      	mvns	r2, r3
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	4013      	ands	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	409a      	lsls	r2, r3
 800060c:	0013      	movs	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4313      	orrs	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	055b      	lsls	r3, r3, #21
 8000622:	4013      	ands	r3, r2
 8000624:	d100      	bne.n	8000628 <HAL_GPIO_Init+0x17c>
 8000626:	e09a      	b.n	800075e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <HAL_GPIO_Init+0x2d0>)
 800062a:	4a54      	ldr	r2, [pc, #336]	; (800077c <HAL_GPIO_Init+0x2d0>)
 800062c:	6992      	ldr	r2, [r2, #24]
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	619a      	str	r2, [r3, #24]
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_GPIO_Init+0x2d0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	2201      	movs	r2, #1
 800063a:	4013      	ands	r3, r2
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000640:	4a4f      	ldr	r2, [pc, #316]	; (8000780 <HAL_GPIO_Init+0x2d4>)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	3302      	adds	r3, #2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	589b      	ldr	r3, [r3, r2]
 800064c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2203      	movs	r2, #3
 8000652:	4013      	ands	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	220f      	movs	r2, #15
 8000658:	409a      	lsls	r2, r3
 800065a:	0013      	movs	r3, r2
 800065c:	43da      	mvns	r2, r3
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	4013      	ands	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	429a      	cmp	r2, r3
 800066c:	d013      	beq.n	8000696 <HAL_GPIO_Init+0x1ea>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a44      	ldr	r2, [pc, #272]	; (8000784 <HAL_GPIO_Init+0x2d8>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d00d      	beq.n	8000692 <HAL_GPIO_Init+0x1e6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a43      	ldr	r2, [pc, #268]	; (8000788 <HAL_GPIO_Init+0x2dc>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d007      	beq.n	800068e <HAL_GPIO_Init+0x1e2>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a42      	ldr	r2, [pc, #264]	; (800078c <HAL_GPIO_Init+0x2e0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d101      	bne.n	800068a <HAL_GPIO_Init+0x1de>
 8000686:	2303      	movs	r3, #3
 8000688:	e006      	b.n	8000698 <HAL_GPIO_Init+0x1ec>
 800068a:	2305      	movs	r3, #5
 800068c:	e004      	b.n	8000698 <HAL_GPIO_Init+0x1ec>
 800068e:	2302      	movs	r3, #2
 8000690:	e002      	b.n	8000698 <HAL_GPIO_Init+0x1ec>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <HAL_GPIO_Init+0x1ec>
 8000696:	2300      	movs	r3, #0
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	2103      	movs	r1, #3
 800069c:	400a      	ands	r2, r1
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	4093      	lsls	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a8:	4935      	ldr	r1, [pc, #212]	; (8000780 <HAL_GPIO_Init+0x2d4>)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	089b      	lsrs	r3, r3, #2
 80006ae:	3302      	adds	r3, #2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	43da      	mvns	r2, r3
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	4013      	ands	r3, r2
 80006c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	025b      	lsls	r3, r3, #9
 80006ce:	4013      	ands	r3, r2
 80006d0:	d003      	beq.n	80006da <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	43da      	mvns	r2, r3
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	4013      	ands	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	685a      	ldr	r2, [r3, #4]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	029b      	lsls	r3, r3, #10
 80006f8:	4013      	ands	r3, r2
 80006fa:	d003      	beq.n	8000704 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	43da      	mvns	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4013      	ands	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	035b      	lsls	r3, r3, #13
 8000722:	4013      	ands	r3, r2
 8000724:	d003      	beq.n	800072e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4313      	orrs	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	43da      	mvns	r2, r3
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	039b      	lsls	r3, r3, #14
 800074c:	4013      	ands	r3, r2
 800074e:	d003      	beq.n	8000758 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4313      	orrs	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_GPIO_Init+0x2e4>)
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	40da      	lsrs	r2, r3
 800076c:	1e13      	subs	r3, r2, #0
 800076e:	d000      	beq.n	8000772 <HAL_GPIO_Init+0x2c6>
 8000770:	e6a8      	b.n	80004c4 <HAL_GPIO_Init+0x18>
  } 
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b006      	add	sp, #24
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000
 8000784:	48000400 	.word	0x48000400
 8000788:	48000800 	.word	0x48000800
 800078c:	48000c00 	.word	0x48000c00
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	0008      	movs	r0, r1
 800079e:	0011      	movs	r1, r2
 80007a0:	1cbb      	adds	r3, r7, #2
 80007a2:	1c02      	adds	r2, r0, #0
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	1c7b      	adds	r3, r7, #1
 80007a8:	1c0a      	adds	r2, r1, #0
 80007aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007ac:	1c7b      	adds	r3, r7, #1
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d004      	beq.n	80007be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007b4:	1cbb      	adds	r3, r7, #2
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007bc:	e003      	b.n	80007c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007be:	1cbb      	adds	r3, r7, #2
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e081      	b.n	80008e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2241      	movs	r2, #65	; 0x41
 80007e6:	5c9b      	ldrb	r3, [r3, r2]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d107      	bne.n	80007fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2240      	movs	r2, #64	; 0x40
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fdb1 	bl	8002360 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2241      	movs	r2, #65	; 0x41
 8000802:	2124      	movs	r1, #36	; 0x24
 8000804:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	6812      	ldr	r2, [r2, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	438a      	bics	r2, r1
 8000814:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	6852      	ldr	r2, [r2, #4]
 800081e:	4934      	ldr	r1, [pc, #208]	; (80008f0 <HAL_I2C_Init+0x120>)
 8000820:	400a      	ands	r2, r1
 8000822:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	6892      	ldr	r2, [r2, #8]
 800082e:	4931      	ldr	r1, [pc, #196]	; (80008f4 <HAL_I2C_Init+0x124>)
 8000830:	400a      	ands	r2, r1
 8000832:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d108      	bne.n	800084e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	6892      	ldr	r2, [r2, #8]
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0209      	lsls	r1, r1, #8
 8000848:	430a      	orrs	r2, r1
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	e007      	b.n	800085e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6892      	ldr	r2, [r2, #8]
 8000856:	2184      	movs	r1, #132	; 0x84
 8000858:	0209      	lsls	r1, r1, #8
 800085a:	430a      	orrs	r2, r1
 800085c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d104      	bne.n	8000870 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	6852      	ldr	r2, [r2, #4]
 800087a:	491f      	ldr	r1, [pc, #124]	; (80008f8 <HAL_I2C_Init+0x128>)
 800087c:	430a      	orrs	r2, r1
 800087e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	68d2      	ldr	r2, [r2, #12]
 800088a:	491a      	ldr	r1, [pc, #104]	; (80008f4 <HAL_I2C_Init+0x124>)
 800088c:	400a      	ands	r2, r1
 800088e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	6911      	ldr	r1, [r2, #16]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6952      	ldr	r2, [r2, #20]
 800089c:	4311      	orrs	r1, r2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6992      	ldr	r2, [r2, #24]
 80008a2:	0212      	lsls	r2, r2, #8
 80008a4:	430a      	orrs	r2, r1
 80008a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	69d1      	ldr	r1, [r2, #28]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	6a12      	ldr	r2, [r2, #32]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2241      	movs	r2, #65	; 0x41
 80008d2:	2120      	movs	r1, #32
 80008d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2242      	movs	r2, #66	; 0x42
 80008e0:	2100      	movs	r1, #0
 80008e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	f0ffffff 	.word	0xf0ffffff
 80008f4:	ffff7fff 	.word	0xffff7fff
 80008f8:	02008000 	.word	0x02008000

080008fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	0008      	movs	r0, r1
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	0019      	movs	r1, r3
 800090a:	230a      	movs	r3, #10
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	1c02      	adds	r2, r0, #0
 8000910:	801a      	strh	r2, [r3, #0]
 8000912:	2308      	movs	r3, #8
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	1c0a      	adds	r2, r1, #0
 8000918:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2241      	movs	r2, #65	; 0x41
 8000922:	5c9b      	ldrb	r3, [r3, r2]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b20      	cmp	r3, #32
 8000928:	d000      	beq.n	800092c <HAL_I2C_Master_Transmit+0x30>
 800092a:	e0f3      	b.n	8000b14 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	5c9b      	ldrb	r3, [r3, r2]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d101      	bne.n	800093a <HAL_I2C_Master_Transmit+0x3e>
 8000936:	2302      	movs	r3, #2
 8000938:	e0ed      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2240      	movs	r2, #64	; 0x40
 800093e:	2101      	movs	r1, #1
 8000940:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000942:	f7ff fcaf 	bl	80002a4 <HAL_GetTick>
 8000946:	0003      	movs	r3, r0
 8000948:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	0219      	lsls	r1, r3, #8
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2319      	movs	r3, #25
 8000956:	2201      	movs	r2, #1
 8000958:	f000 fa1a 	bl	8000d90 <I2C_WaitOnFlagUntilTimeout>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8000960:	2303      	movs	r3, #3
 8000962:	e0d8      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2241      	movs	r2, #65	; 0x41
 8000968:	2121      	movs	r1, #33	; 0x21
 800096a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2242      	movs	r2, #66	; 0x42
 8000970:	2110      	movs	r1, #16
 8000972:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2200      	movs	r2, #0
 8000978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2208      	movs	r2, #8
 8000984:	18ba      	adds	r2, r7, r2
 8000986:	8812      	ldrh	r2, [r2, #0]
 8000988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000994:	b29b      	uxth	r3, r3
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d912      	bls.n	80009c0 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	045c      	lsls	r4, r3, #17
 80009aa:	230a      	movs	r3, #10
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	8819      	ldrh	r1, [r3, #0]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	0023      	movs	r3, r4
 80009ba:	f000 fb59 	bl	8001070 <I2C_TransferConfig>
 80009be:	e07a      	b.n	8000ab6 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	049c      	lsls	r4, r3, #18
 80009d4:	230a      	movs	r3, #10
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	8819      	ldrh	r1, [r3, #0]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	019b      	lsls	r3, r3, #6
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	0023      	movs	r3, r4
 80009e4:	f000 fb44 	bl	8001070 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80009e8:	e065      	b.n	8000ab6 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fa06 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d007      	beq.n	8000a0a <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d101      	bne.n	8000a06 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e087      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e085      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a12:	1c50      	adds	r0, r2, #1
 8000a14:	68f9      	ldr	r1, [r7, #12]
 8000a16:	6248      	str	r0, [r1, #36]	; 0x24
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	3b01      	subs	r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d13b      	bne.n	8000ab6 <HAL_I2C_Master_Transmit+0x1ba>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d036      	beq.n	8000ab6 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	0013      	movs	r3, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	f000 f99b 	bl	8000d90 <I2C_WaitOnFlagUntilTimeout>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e059      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2bff      	cmp	r3, #255	; 0xff
 8000a6a:	d911      	bls.n	8000a90 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	045c      	lsls	r4, r3, #17
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	8819      	ldrh	r1, [r3, #0]
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	2300      	movs	r3, #0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	0023      	movs	r3, r4
 8000a8a:	f000 faf1 	bl	8001070 <I2C_TransferConfig>
 8000a8e:	e012      	b.n	8000ab6 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	049c      	lsls	r4, r3, #18
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	8819      	ldrh	r1, [r3, #0]
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	0023      	movs	r3, r4
 8000ab2:	f000 fadd 	bl	8001070 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d194      	bne.n	80009ea <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f9da 	bl	8000e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d101      	bne.n	8000adc <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e01c      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e01a      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6852      	ldr	r2, [r2, #4]
 8000af2:	490b      	ldr	r1, [pc, #44]	; (8000b20 <HAL_I2C_Master_Transmit+0x224>)
 8000af4:	400a      	ands	r2, r1
 8000af6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2241      	movs	r2, #65	; 0x41
 8000afc:	2120      	movs	r1, #32
 8000afe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2242      	movs	r2, #66	; 0x42
 8000b04:	2100      	movs	r1, #0
 8000b06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2240      	movs	r2, #64	; 0x40
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e000      	b.n	8000b16 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000b14:	2302      	movs	r3, #2
  }
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b007      	add	sp, #28
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	fe00e800 	.word	0xfe00e800

08000b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	0008      	movs	r0, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	0019      	movs	r1, r3
 8000b32:	230a      	movs	r3, #10
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	801a      	strh	r2, [r3, #0]
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	1c0a      	adds	r2, r1, #0
 8000b40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2241      	movs	r2, #65	; 0x41
 8000b4a:	5c9b      	ldrb	r3, [r3, r2]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b20      	cmp	r3, #32
 8000b50:	d000      	beq.n	8000b54 <HAL_I2C_Master_Receive+0x30>
 8000b52:	e0f4      	b.n	8000d3e <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2240      	movs	r2, #64	; 0x40
 8000b58:	5c9b      	ldrb	r3, [r3, r2]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2C_Master_Receive+0x3e>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e0ee      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2240      	movs	r2, #64	; 0x40
 8000b66:	2101      	movs	r1, #1
 8000b68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000b6a:	f7ff fb9b 	bl	80002a4 <HAL_GetTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	0219      	lsls	r1, r3, #8
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2319      	movs	r3, #25
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f000 f906 	bl	8000d90 <I2C_WaitOnFlagUntilTimeout>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e0d9      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2241      	movs	r2, #65	; 0x41
 8000b90:	2122      	movs	r1, #34	; 0x22
 8000b92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2242      	movs	r2, #66	; 0x42
 8000b98:	2110      	movs	r1, #16
 8000b9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2208      	movs	r2, #8
 8000bac:	18ba      	adds	r2, r7, r2
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2bff      	cmp	r3, #255	; 0xff
 8000bc0:	d912      	bls.n	8000be8 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	22ff      	movs	r2, #255	; 0xff
 8000bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	045c      	lsls	r4, r3, #17
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	2390      	movs	r3, #144	; 0x90
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	0023      	movs	r3, r4
 8000be2:	f000 fa45 	bl	8001070 <I2C_TransferConfig>
 8000be6:	e07b      	b.n	8000ce0 <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	049c      	lsls	r4, r3, #18
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	8819      	ldrh	r1, [r3, #0]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	019b      	lsls	r3, r3, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	0023      	movs	r3, r4
 8000c0c:	f000 fa30 	bl	8001070 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000c10:	e066      	b.n	8000ce0 <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 f96d 	bl	8000ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d101      	bne.n	8000c2e <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e088      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e086      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	1c59      	adds	r1, r3, #1
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	6251      	str	r1, [r2, #36]	; 0x24
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d13b      	bne.n	8000ce0 <HAL_I2C_Master_Receive+0x1bc>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d036      	beq.n	8000ce0 <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	f000 f886 	bl	8000d90 <I2C_WaitOnFlagUntilTimeout>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e059      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d911      	bls.n	8000cba <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	045c      	lsls	r4, r3, #17
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	8819      	ldrh	r1, [r3, #0]
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	f000 f9dc 	bl	8001070 <I2C_TransferConfig>
 8000cb8:	e012      	b.n	8000ce0 <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	049c      	lsls	r4, r3, #18
 8000cce:	230a      	movs	r3, #10
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	8819      	ldrh	r1, [r3, #0]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	0023      	movs	r3, r4
 8000cdc:	f000 f9c8 	bl	8001070 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d193      	bne.n	8000c12 <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 f8c5 	bl	8000e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d007      	beq.n	8000d0a <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d101      	bne.n	8000d06 <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e01c      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e01a      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2220      	movs	r2, #32
 8000d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	6852      	ldr	r2, [r2, #4]
 8000d1c:	490a      	ldr	r1, [pc, #40]	; (8000d48 <HAL_I2C_Master_Receive+0x224>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2241      	movs	r2, #65	; 0x41
 8000d26:	2120      	movs	r1, #32
 8000d28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2242      	movs	r2, #66	; 0x42
 8000d2e:	2100      	movs	r1, #0
 8000d30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	2100      	movs	r1, #0
 8000d38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000d3e:	2302      	movs	r3, #2
  }
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b007      	add	sp, #28
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	fe00e800 	.word	0xfe00e800

08000d4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d103      	bne.n	8000d6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d007      	beq.n	8000d88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	6992      	ldr	r2, [r2, #24]
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	619a      	str	r2, [r3, #24]
  }
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000da0:	e01b      	b.n	8000dda <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	d018      	beq.n	8000dda <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000dae:	f7ff fa79 	bl	80002a4 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad2      	subs	r2, r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d90d      	bls.n	8000dda <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2241      	movs	r2, #65	; 0x41
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2242      	movs	r2, #66	; 0x42
 8000dca:	2100      	movs	r1, #0
 8000dcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2240      	movs	r2, #64	; 0x40
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e00f      	b.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	425a      	negs	r2, r3
 8000dea:	4153      	adcs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	001a      	movs	r2, r3
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d0d4      	beq.n	8000da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e0e:	e02b      	b.n	8000e68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f8cc 	bl	8000fb4 <I2C_IsAcknowledgeFailed>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e029      	b.n	8000e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	d01e      	beq.n	8000e68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000e30:	f7ff fa38 	bl	80002a4 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d913      	bls.n	8000e68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	2220      	movs	r2, #32
 8000e46:	431a      	orrs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2241      	movs	r2, #65	; 0x41
 8000e50:	2120      	movs	r1, #32
 8000e52:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2242      	movs	r2, #66	; 0x42
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e007      	b.n	8000e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d1cc      	bne.n	8000e10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e8c:	e028      	b.n	8000ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 f88d 	bl	8000fb4 <I2C_IsAcknowledgeFailed>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e026      	b.n	8000ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000ea8:	f7ff f9fc 	bl	80002a4 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	1ad2      	subs	r2, r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d913      	bls.n	8000ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2241      	movs	r2, #65	; 0x41
 8000ec8:	2120      	movs	r1, #32
 8000eca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2242      	movs	r2, #66	; 0x42
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2240      	movs	r2, #64	; 0x40
 8000ed8:	2100      	movs	r1, #0
 8000eda:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e007      	b.n	8000ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b20      	cmp	r3, #32
 8000eec:	d1cf      	bne.n	8000e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f04:	e048      	b.n	8000f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 f851 	bl	8000fb4 <I2C_IsAcknowledgeFailed>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d001      	beq.n	8000f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e046      	b.n	8000fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2220      	movs	r2, #32
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d11c      	bne.n	8000f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	6852      	ldr	r2, [r2, #4]
 8000f3a:	491d      	ldr	r1, [pc, #116]	; (8000fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2241      	movs	r2, #65	; 0x41
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2242      	movs	r2, #66	; 0x42
 8000f52:	2100      	movs	r1, #0
 8000f54:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e022      	b.n	8000fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d007      	beq.n	8000f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8000f68:	f7ff f99c 	bl	80002a4 <HAL_GetTick>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d90f      	bls.n	8000f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2241      	movs	r2, #65	; 0x41
 8000f88:	2120      	movs	r1, #32
 8000f8a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	2100      	movs	r1, #0
 8000f92:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e007      	b.n	8000fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d1af      	bne.n	8000f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b004      	add	sp, #16
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	fe00e800 	.word	0xfe00e800

08000fb4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d148      	bne.n	8001060 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fce:	e01b      	b.n	8001008 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	d018      	beq.n	8001008 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <I2C_IsAcknowledgeFailed+0x38>
 8000fdc:	f7ff f962 	bl	80002a4 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d90d      	bls.n	8001008 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2241      	movs	r2, #65	; 0x41
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2242      	movs	r2, #66	; 0x42
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e02c      	b.n	8001062 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2220      	movs	r2, #32
 8001010:	4013      	ands	r3, r2
 8001012:	2b20      	cmp	r3, #32
 8001014:	d1dc      	bne.n	8000fd0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2210      	movs	r2, #16
 800101c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2220      	movs	r2, #32
 8001024:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff fe8f 	bl	8000d4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	6852      	ldr	r2, [r2, #4]
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <I2C_IsAcknowledgeFailed+0xb8>)
 800103a:	400a      	ands	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2204      	movs	r2, #4
 8001042:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2241      	movs	r2, #65	; 0x41
 8001048:	2120      	movs	r1, #32
 800104a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2242      	movs	r2, #66	; 0x42
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2240      	movs	r2, #64	; 0x40
 8001058:	2100      	movs	r1, #0
 800105a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	fe00e800 	.word	0xfe00e800

08001070 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	0008      	movs	r0, r1
 800107a:	0011      	movs	r1, r2
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	230a      	movs	r3, #10
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	801a      	strh	r2, [r3, #0]
 8001086:	2309      	movs	r3, #9
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	1c0a      	adds	r2, r1, #0
 800108c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <I2C_TransferConfig+0x6c>)
 800109e:	4013      	ands	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80010a2:	230a      	movs	r3, #10
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	059b      	lsls	r3, r3, #22
 80010aa:	0d9a      	lsrs	r2, r3, #22
 80010ac:	2309      	movs	r3, #9
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0419      	lsls	r1, r3, #16
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	400b      	ands	r3, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	431a      	orrs	r2, r3
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	605a      	str	r2, [r3, #4]
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b006      	add	sp, #24
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	fc009800 	.word	0xfc009800

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18>
 80010f6:	e08d      	b.n	8001214 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f8:	4bc3      	ldr	r3, [pc, #780]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	220c      	movs	r2, #12
 80010fe:	4013      	ands	r3, r2
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00e      	beq.n	8001122 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4bc0      	ldr	r3, [pc, #768]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	220c      	movs	r2, #12
 800110a:	4013      	ands	r3, r2
 800110c:	2b08      	cmp	r3, #8
 800110e:	d116      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
 8001110:	4bbd      	ldr	r3, [pc, #756]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	401a      	ands	r2, r3
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	429a      	cmp	r2, r3
 8001120:	d10d      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4bb9      	ldr	r3, [pc, #740]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x50>
 800112e:	e070      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d000      	beq.n	800113a <HAL_RCC_OscConfig+0x5a>
 8001138:	e06b      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e2b5      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_RCC_OscConfig+0x76>
 8001146:	4bb0      	ldr	r3, [pc, #704]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001148:	4aaf      	ldr	r2, [pc, #700]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0249      	lsls	r1, r1, #9
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e02f      	b.n	80011b6 <HAL_RCC_OscConfig+0xd6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x98>
 800115e:	4baa      	ldr	r3, [pc, #680]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001160:	4aa9      	ldr	r2, [pc, #676]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	49a9      	ldr	r1, [pc, #676]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001166:	400a      	ands	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	4ba7      	ldr	r3, [pc, #668]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800116c:	4aa6      	ldr	r2, [pc, #664]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	49a7      	ldr	r1, [pc, #668]	; (8001410 <HAL_RCC_OscConfig+0x330>)
 8001172:	400a      	ands	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e01e      	b.n	80011b6 <HAL_RCC_OscConfig+0xd6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b05      	cmp	r3, #5
 800117e:	d10e      	bne.n	800119e <HAL_RCC_OscConfig+0xbe>
 8001180:	4ba1      	ldr	r3, [pc, #644]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001182:	4aa1      	ldr	r2, [pc, #644]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	02c9      	lsls	r1, r1, #11
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001190:	4a9d      	ldr	r2, [pc, #628]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0249      	lsls	r1, r1, #9
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e00b      	b.n	80011b6 <HAL_RCC_OscConfig+0xd6>
 800119e:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80011a0:	4a99      	ldr	r2, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4999      	ldr	r1, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80011ac:	4a96      	ldr	r2, [pc, #600]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4997      	ldr	r1, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x330>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d014      	beq.n	80011e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff f871 	bl	80002a4 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff f86c 	bl	80002a4 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e267      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe8>
 80011e6:	e015      	b.n	8001214 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff f85c 	bl	80002a4 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f2:	f7ff f857 	bl	80002a4 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e252      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001204:	4b80      	ldr	r3, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x112>
 8001210:	e000      	b.n	8001214 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	4013      	ands	r3, r2
 800121c:	d100      	bne.n	8001220 <HAL_RCC_OscConfig+0x140>
 800121e:	e069      	b.n	80012f4 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001220:	4b79      	ldr	r3, [pc, #484]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	d00b      	beq.n	8001242 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122a:	4b77      	ldr	r3, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	220c      	movs	r2, #12
 8001230:	4013      	ands	r3, r2
 8001232:	2b08      	cmp	r3, #8
 8001234:	d11c      	bne.n	8001270 <HAL_RCC_OscConfig+0x190>
 8001236:	4b74      	ldr	r3, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	025b      	lsls	r3, r3, #9
 800123e:	4013      	ands	r3, r2
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b71      	ldr	r3, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x178>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e228      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4a6b      	ldr	r2, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800125a:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	438b      	bics	r3, r1
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	430b      	orrs	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e041      	b.n	80012f4 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d024      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff f80e 	bl	80002a4 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff f809 	bl	80002a4 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e204      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2202      	movs	r2, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0f1      	beq.n	800128e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012ac:	4b56      	ldr	r3, [pc, #344]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	21f8      	movs	r1, #248	; 0xf8
 80012b2:	438b      	bics	r3, r1
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	430b      	orrs	r3, r1
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e018      	b.n	80012f4 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7fe ffe9 	bl	80002a4 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7fe ffe4 	bl	80002a4 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1df      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	d1f1      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	4013      	ands	r3, r2
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d019      	beq.n	800133a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001308:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800130a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7fe ffc7 	bl	80002a4 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7fe ffc2 	bl	80002a4 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1bd      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d0f1      	beq.n	800131c <HAL_RCC_OscConfig+0x23c>
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800133c:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800133e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7fe ffad 	bl	80002a4 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7fe ffa8 	bl	80002a4 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1a3      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d1f1      	bne.n	8001350 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_RCC_OscConfig+0x298>
 8001376:	e0b5      	b.n	80014e4 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001378:	2317      	movs	r3, #23
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	055b      	lsls	r3, r3, #21
 8001388:	4013      	ands	r3, r2
 800138a:	d111      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 8001390:	69d2      	ldr	r2, [r2, #28]
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0549      	lsls	r1, r1, #21
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	055b      	lsls	r3, r3, #21
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a8:	2317      	movs	r3, #23
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	d11a      	bne.n	80013f2 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0049      	lsls	r1, r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7fe ff6b 	bl	80002a4 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d4:	f7fe ff66 	bl	80002a4 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e161      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10e      	bne.n	8001418 <HAL_RCC_OscConfig+0x338>
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80013fc:	4a02      	ldr	r2, [pc, #8]	; (8001408 <HAL_RCC_OscConfig+0x328>)
 80013fe:	6a12      	ldr	r2, [r2, #32]
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	e035      	b.n	8001474 <HAL_RCC_OscConfig+0x394>
 8001408:	40021000 	.word	0x40021000
 800140c:	fffeffff 	.word	0xfffeffff
 8001410:	fffbffff 	.word	0xfffbffff
 8001414:	40007000 	.word	0x40007000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x35a>
 8001420:	4ba4      	ldr	r3, [pc, #656]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001422:	4aa4      	ldr	r2, [pc, #656]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001424:	6a12      	ldr	r2, [r2, #32]
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800142e:	4aa1      	ldr	r2, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001430:	6a12      	ldr	r2, [r2, #32]
 8001432:	2104      	movs	r1, #4
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x394>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x37c>
 8001442:	4b9c      	ldr	r3, [pc, #624]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001444:	4a9b      	ldr	r2, [pc, #620]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001446:	6a12      	ldr	r2, [r2, #32]
 8001448:	2104      	movs	r1, #4
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001450:	4a98      	ldr	r2, [pc, #608]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001452:	6a12      	ldr	r2, [r2, #32]
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x394>
 800145c:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800145e:	4a95      	ldr	r2, [pc, #596]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001460:	6a12      	ldr	r2, [r2, #32]
 8001462:	2101      	movs	r1, #1
 8001464:	438a      	bics	r2, r1
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800146a:	4a92      	ldr	r2, [pc, #584]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800146c:	6a12      	ldr	r2, [r2, #32]
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d014      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7fe ff12 	bl	80002a4 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e009      	b.n	800149a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7fe ff0d 	bl	80002a4 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a89      	ldr	r2, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x5d8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e107      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b86      	ldr	r3, [pc, #536]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x3a6>
 80014a4:	e013      	b.n	80014ce <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7fe fefd 	bl	80002a4 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e009      	b.n	80014c4 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7fe fef8 	bl	80002a4 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a7f      	ldr	r2, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x5d8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0f2      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ce:	2317      	movs	r3, #23
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80014da:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80014dc:	69d2      	ldr	r2, [r2, #28]
 80014de:	4977      	ldr	r1, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x5dc>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2210      	movs	r2, #16
 80014ea:	4013      	ands	r3, r2
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12a      	bne.n	800154c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f6:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80014f8:	4a6e      	ldr	r2, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80014fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001504:	4a6b      	ldr	r2, [pc, #428]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001506:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7fe fec9 	bl	80002a4 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001518:	f7fe fec4 	bl	80002a4 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0bf      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d0f1      	beq.n	8001518 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001534:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	21f8      	movs	r1, #248	; 0xf8
 800153c:	438b      	bics	r3, r1
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	430b      	orrs	r3, r1
 8001548:	6353      	str	r3, [r2, #52]	; 0x34
 800154a:	e034      	b.n	80015b6 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	3305      	adds	r3, #5
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001554:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001556:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001562:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	21f8      	movs	r1, #248	; 0xf8
 8001568:	438b      	bics	r3, r1
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	430b      	orrs	r3, r1
 8001574:	6353      	str	r3, [r2, #52]	; 0x34
 8001576:	e01e      	b.n	80015b6 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800157c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800157e:	2104      	movs	r1, #4
 8001580:	430a      	orrs	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001584:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001586:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7fe fe88 	bl	80002a4 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159a:	f7fe fe83 	bl	80002a4 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e07e      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ac:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4e0>
 80015be:	e073      	b.n	80016a8 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d100      	bne.n	80015ce <HAL_RCC_OscConfig+0x4ee>
 80015cc:	e06a      	b.n	80016a4 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d14b      	bne.n	800166e <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80015d8:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4938      	ldr	r1, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x5e0>)
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7fe fe5f 	bl	80002a4 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7fe fe5a 	bl	80002a4 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e055      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	049b      	lsls	r3, r3, #18
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	210f      	movs	r1, #15
 8001612:	438b      	bics	r3, r1
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	430b      	orrs	r3, r1
 800161c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800161e:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4927      	ldr	r1, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x5e4>)
 8001626:	4019      	ands	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	4303      	orrs	r3, r0
 8001632:	430b      	orrs	r3, r1
 8001634:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0449      	lsls	r1, r1, #17
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7fe fe2e 	bl	80002a4 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7fe fe29 	bl	80002a4 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e024      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	049b      	lsls	r3, r3, #18
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x56e>
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001670:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4912      	ldr	r1, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x5e0>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7fe fe13 	bl	80002a4 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7fe fe0e 	bl	80002a4 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e009      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_RCC_OscConfig+0x5d4>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x5a4>
 80016a2:	e001      	b.n	80016a8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b006      	add	sp, #24
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	efffffff 	.word	0xefffffff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	ffc2ffff 	.word	0xffc2ffff

080016c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	401a      	ands	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d211      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e4:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016e6:	4a65      	ldr	r2, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	2101      	movs	r1, #1
 80016ec:	438a      	bics	r2, r1
 80016ee:	0011      	movs	r1, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	401a      	ands	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b5      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001712:	4a5b      	ldr	r2, [pc, #364]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	21f0      	movs	r1, #240	; 0xf0
 800171a:	438b      	bics	r3, r1
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	430b      	orrs	r3, r1
 8001724:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_ClockConfig+0x6a>
 8001730:	e067      	b.n	8001802 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	d114      	bne.n	8001770 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e094      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	049b      	lsls	r3, r3, #18
 800175a:	4013      	ands	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e088      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e081      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2103      	movs	r1, #3
 8001778:	438b      	bics	r3, r1
 800177a:	0019      	movs	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	430b      	orrs	r3, r1
 8001782:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001784:	f7fe fd8e 	bl	80002a4 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d111      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	e009      	b.n	80017aa <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7fe fd85 	bl	80002a4 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a38      	ldr	r2, [pc, #224]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e064      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017aa:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	220c      	movs	r2, #12
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d1ef      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
 80017b6:	e024      	b.n	8001802 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d11b      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	e009      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c2:	f7fe fd6f 	bl	80002a4 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04e      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	220c      	movs	r2, #12
 80017dc:	4013      	ands	r3, r2
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d1ef      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
 80017e2:	e00e      	b.n	8001802 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7fe fd5e 	bl	80002a4 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e03d      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	220c      	movs	r2, #12
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	401a      	ands	r2, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d911      	bls.n	8001834 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	0011      	movs	r1, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	401a      	ands	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e01f      	b.n	8001874 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2204      	movs	r2, #4
 800183a:	4013      	ands	r3, r2
 800183c:	d008      	beq.n	8001850 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4910      	ldr	r1, [pc, #64]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001846:	4019      	ands	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	430b      	orrs	r3, r1
 800184e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001850:	f000 f820 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001854:	0001      	movs	r1, r0
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	220f      	movs	r2, #15
 800185e:	4013      	ands	r3, r2
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	000a      	movs	r2, r1
 8001866:	40da      	lsrs	r2, r3
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800186c:	2000      	movs	r0, #0
 800186e:	f7fe fcf0 	bl	8000252 <HAL_InitTick>
  
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
 8001884:	00001388 	.word	0x00001388
 8001888:	fffff8ff 	.word	0xfffff8ff
 800188c:	080029fc 	.word	0x080029fc
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08f      	sub	sp, #60	; 0x3c
 8001898:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800189a:	2314      	movs	r3, #20
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_RCC_GetSysClockFreq+0xac>)
 80018a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018a2:	c313      	stmia	r3!, {r0, r1, r4}
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ae:	c313      	stmia	r3!, {r0, r1, r4}
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	220c      	movs	r2, #12
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d002      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x4a>
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d003      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x50>
 80018dc:	e027      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e2:	e027      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	220f      	movs	r2, #15
 80018ea:	4013      	ands	r3, r2
 80018ec:	2214      	movs	r2, #20
 80018ee:	18ba      	adds	r2, r7, r2
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	220f      	movs	r2, #15
 80018fa:	4013      	ands	r3, r2
 80018fc:	1d3a      	adds	r2, r7, #4
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	4013      	ands	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800190c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001910:	f7fe fbfa 	bl	8000108 <__udivsi3>
 8001914:	0003      	movs	r3, r0
 8001916:	001a      	movs	r2, r3
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	4353      	muls	r3, r2
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
 800191e:	e003      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001924:	4353      	muls	r3, r2
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800192c:	e002      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001932:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b00f      	add	sp, #60	; 0x3c
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	080029bc 	.word	0x080029bc
 8001944:	080029cc 	.word	0x080029cc
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	003d0900 	.word	0x003d0900

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_RCC_GetHCLKFreq+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800196c:	f7ff fff2 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001970:	0001      	movs	r1, r0
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	2207      	movs	r2, #7
 800197a:	4013      	ands	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	40d9      	lsrs	r1, r3
 8001982:	000b      	movs	r3, r1
}    
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000
 8001990:	08002a0c 	.word	0x08002a0c

08001994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	025b      	lsls	r3, r3, #9
 80019ac:	4013      	ands	r3, r2
 80019ae:	d100      	bne.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019b0:	e08e      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2317      	movs	r3, #23
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	055b      	lsls	r3, r3, #21
 80019c2:	4013      	ands	r3, r2
 80019c4:	d111      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c8:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ca:	69d2      	ldr	r2, [r2, #28]
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0549      	lsls	r1, r1, #21
 80019d0:	430a      	orrs	r2, r1
 80019d2:	61da      	str	r2, [r3, #28]
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019d6:	69da      	ldr	r2, [r3, #28]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e2:	2317      	movs	r3, #23
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	d11a      	bne.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f6:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0049      	lsls	r1, r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a04:	f7fe fc4e 	bl	80002a4 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7fe fc49 	bl	80002a4 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e076      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	23c0      	movs	r3, #192	; 0xc0
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	23c0      	movs	r3, #192	; 0xc0
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	401a      	ands	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d02c      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a33      	ldr	r2, [pc, #204]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a5c:	6a12      	ldr	r2, [r2, #32]
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0249      	lsls	r1, r1, #9
 8001a62:	430a      	orrs	r2, r1
 8001a64:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a68:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a6a:	6a12      	ldr	r2, [r2, #32]
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fc10 	bl	80002a4 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	e009      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7fe fc0b 	bl	80002a4 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e037      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	491c      	ldr	r1, [pc, #112]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ab0:	4019      	ands	r1, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aba:	2317      	movs	r3, #23
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac8:	69d2      	ldr	r2, [r2, #28]
 8001aca:	4918      	ldr	r1, [pc, #96]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	438b      	bics	r3, r1
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2220      	movs	r2, #32
 8001af4:	4013      	ands	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	2110      	movs	r1, #16
 8001b00:	438b      	bics	r3, r1
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b006      	add	sp, #24
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	fffffcff 	.word	0xfffffcff
 8001b24:	fffeffff 	.word	0xfffeffff
 8001b28:	00001388 	.word	0x00001388
 8001b2c:	efffffff 	.word	0xefffffff

08001b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e047      	b.n	8001bd2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2269      	movs	r2, #105	; 0x69
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2268      	movs	r2, #104	; 0x68
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 fe39 	bl	80027d0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2269      	movs	r2, #105	; 0x69
 8001b62:	2124      	movs	r1, #36	; 0x24
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	438a      	bics	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 f8d5 	bl	8001d28 <UART_SetConfig>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e024      	b.n	8001bd2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 fa26 	bl	8001fe4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	6852      	ldr	r2, [r2, #4]
 8001ba2:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_UART_Init+0xac>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	6892      	ldr	r2, [r2, #8]
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 fab6 	bl	800213c <UART_CheckIdleState>
 8001bd0:	0003      	movs	r3, r0
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	fffff7ff 	.word	0xfffff7ff

08001be0 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	1dbb      	adds	r3, r7, #6
 8001bee:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2269      	movs	r2, #105	; 0x69
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d000      	beq.n	8001c02 <HAL_UART_Transmit+0x22>
 8001c00:	e08c      	b.n	8001d1c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_UART_Transmit+0x30>
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e084      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d109      	bne.n	8001c34 <HAL_UART_Transmit+0x54>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e074      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2268      	movs	r2, #104	; 0x68
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Transmit+0x62>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e06d      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2268      	movs	r2, #104	; 0x68
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2269      	movs	r2, #105	; 0x69
 8001c54:	2121      	movs	r1, #33	; 0x21
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c58:	f7fe fb24 	bl	80002a4 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1dba      	adds	r2, r7, #6
 8001c64:	2150      	movs	r1, #80	; 0x50
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1dba      	adds	r2, r7, #6
 8001c6e:	2152      	movs	r1, #82	; 0x52
 8001c70:	8812      	ldrh	r2, [r2, #0]
 8001c72:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001c74:	e035      	b.n	8001ce2 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2252      	movs	r2, #82	; 0x52
 8001c7a:	5a9b      	ldrh	r3, [r3, r2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b299      	uxth	r1, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2252      	movs	r2, #82	; 0x52
 8001c86:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	0013      	movs	r3, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	f000 fa69 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e03d      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d111      	bne.n	8001cd2 <HAL_UART_Transmit+0xf2>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	05d2      	lsls	r2, r2, #23
 8001cc4:	0dd2      	lsrs	r2, r2, #23
 8001cc6:	b292      	uxth	r2, r2
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3302      	adds	r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	e007      	b.n	8001ce2 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2252      	movs	r2, #82	; 0x52
 8001ce6:	5a9b      	ldrh	r3, [r3, r2]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1c3      	bne.n	8001c76 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	f000 fa36 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e00a      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2269      	movs	r2, #105	; 0x69
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2268      	movs	r2, #104	; 0x68
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b006      	add	sp, #24
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d34:	2317      	movs	r3, #23
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2210      	movs	r2, #16
 8001d3a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001d44:	2314      	movs	r3, #20
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d4c:	2313      	movs	r3, #19
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4995      	ldr	r1, [pc, #596]	; (8001fcc <UART_SetConfig+0x2a4>)
 8001d78:	4011      	ands	r1, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	6852      	ldr	r2, [r2, #4]
 8001d8a:	4991      	ldr	r1, [pc, #580]	; (8001fd0 <UART_SetConfig+0x2a8>)
 8001d8c:	4011      	ands	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68d2      	ldr	r2, [r2, #12]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	4989      	ldr	r1, [pc, #548]	; (8001fd4 <UART_SetConfig+0x2ac>)
 8001dae:	4011      	ands	r1, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001db6:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <UART_SetConfig+0x2b0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00f      	beq.n	8001de2 <UART_SetConfig+0xba>
 8001dc2:	d304      	bcc.n	8001dce <UART_SetConfig+0xa6>
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d011      	beq.n	8001dec <UART_SetConfig+0xc4>
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d005      	beq.n	8001dd8 <UART_SetConfig+0xb0>
 8001dcc:	e013      	b.n	8001df6 <UART_SetConfig+0xce>
 8001dce:	2317      	movs	r3, #23
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e012      	b.n	8001dfe <UART_SetConfig+0xd6>
 8001dd8:	2317      	movs	r3, #23
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2202      	movs	r2, #2
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e00d      	b.n	8001dfe <UART_SetConfig+0xd6>
 8001de2:	2317      	movs	r3, #23
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2204      	movs	r2, #4
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <UART_SetConfig+0xd6>
 8001dec:	2317      	movs	r3, #23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2208      	movs	r2, #8
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e003      	b.n	8001dfe <UART_SetConfig+0xd6>
 8001df6:	2317      	movs	r3, #23
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d000      	beq.n	8001e0e <UART_SetConfig+0xe6>
 8001e0c:	e07b      	b.n	8001f06 <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001e0e:	2317      	movs	r3, #23
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d01c      	beq.n	8001e52 <UART_SetConfig+0x12a>
 8001e18:	dc02      	bgt.n	8001e20 <UART_SetConfig+0xf8>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <UART_SetConfig+0x102>
 8001e1e:	e04f      	b.n	8001ec0 <UART_SetConfig+0x198>
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d027      	beq.n	8001e74 <UART_SetConfig+0x14c>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d039      	beq.n	8001e9c <UART_SetConfig+0x174>
 8001e28:	e04a      	b.n	8001ec0 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e2a:	f7ff fd9d 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	005a      	lsls	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	18d2      	adds	r2, r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0019      	movs	r1, r3
 8001e40:	0010      	movs	r0, r2
 8001e42:	f7fe f961 	bl	8000108 <__udivsi3>
 8001e46:	0003      	movs	r3, r0
 8001e48:	001a      	movs	r2, r3
 8001e4a:	2314      	movs	r3, #20
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	801a      	strh	r2, [r3, #0]
        break;
 8001e50:	e03b      	b.n	8001eca <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <UART_SetConfig+0x2b4>)
 8001e5a:	189a      	adds	r2, r3, r2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0019      	movs	r1, r3
 8001e62:	0010      	movs	r0, r2
 8001e64:	f7fe f950 	bl	8000108 <__udivsi3>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	801a      	strh	r2, [r3, #0]
        break;
 8001e72:	e02a      	b.n	8001eca <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e74:	f7ff fd0e 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	005a      	lsls	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	18d2      	adds	r2, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f7fe f93c 	bl	8000108 <__udivsi3>
 8001e90:	0003      	movs	r3, r0
 8001e92:	001a      	movs	r2, r3
 8001e94:	2314      	movs	r3, #20
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	801a      	strh	r2, [r3, #0]
        break;
 8001e9a:	e016      	b.n	8001eca <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	0252      	lsls	r2, r2, #9
 8001ea6:	189a      	adds	r2, r3, r2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0019      	movs	r1, r3
 8001eae:	0010      	movs	r0, r2
 8001eb0:	f7fe f92a 	bl	8000108 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2314      	movs	r3, #20
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	801a      	strh	r2, [r3, #0]
        break;
 8001ebe:	e004      	b.n	8001eca <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001ec0:	2313      	movs	r3, #19
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
        break;
 8001ec8:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2214      	movs	r2, #20
 8001ed0:	18ba      	adds	r2, r7, r2
 8001ed2:	8812      	ldrh	r2, [r2, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001eda:	2314      	movs	r3, #20
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	105b      	asrs	r3, r3, #1
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	230a      	movs	r3, #10
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	220a      	movs	r2, #10
 8001ef0:	18ba      	adds	r2, r7, r2
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	220a      	movs	r2, #10
 8001efe:	18ba      	adds	r2, r7, r2
 8001f00:	8812      	ldrh	r2, [r2, #0]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	e05b      	b.n	8001fbe <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8001f06:	2317      	movs	r3, #23
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d01b      	beq.n	8001f48 <UART_SetConfig+0x220>
 8001f10:	dc02      	bgt.n	8001f18 <UART_SetConfig+0x1f0>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <UART_SetConfig+0x1fa>
 8001f16:	e04d      	b.n	8001fb4 <UART_SetConfig+0x28c>
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d026      	beq.n	8001f6a <UART_SetConfig+0x242>
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d037      	beq.n	8001f90 <UART_SetConfig+0x268>
 8001f20:	e048      	b.n	8001fb4 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681c      	ldr	r4, [r3, #0]
 8001f26:	f7ff fd1f 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	18d2      	adds	r2, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f7fe f8e4 	bl	8000108 <__udivsi3>
 8001f40:	0003      	movs	r3, r0
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	60e3      	str	r3, [r4, #12]
        break;
 8001f46:	e03a      	b.n	8001fbe <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681c      	ldr	r4, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <UART_SetConfig+0x2b8>)
 8001f54:	189a      	adds	r2, r3, r2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f7fe f8d3 	bl	8000108 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	60e3      	str	r3, [r4, #12]
        break;
 8001f68:	e029      	b.n	8001fbe <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	f7ff fc91 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001f72:	0002      	movs	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	18d2      	adds	r2, r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0019      	movs	r1, r3
 8001f82:	0010      	movs	r0, r2
 8001f84:	f7fe f8c0 	bl	8000108 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	60e3      	str	r3, [r4, #12]
        break;
 8001f8e:	e016      	b.n	8001fbe <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681c      	ldr	r4, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	189a      	adds	r2, r3, r2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	f7fe f8ae 	bl	8000108 <__udivsi3>
 8001fac:	0003      	movs	r3, r0
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	60e3      	str	r3, [r4, #12]
        break;
 8001fb2:	e004      	b.n	8001fbe <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fb4:	2313      	movs	r3, #19
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
        break;
 8001fbc:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001fbe:	2313      	movs	r3, #19
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]

}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b007      	add	sp, #28
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	ffff69f3 	.word	0xffff69f3
 8001fd0:	ffffcfff 	.word	0xffffcfff
 8001fd4:	fffff4ff 	.word	0xfffff4ff
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d00a      	beq.n	800200c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	6852      	ldr	r2, [r2, #4]
 8002000:	4945      	ldr	r1, [pc, #276]	; (8002118 <UART_AdvFeatureConfig+0x134>)
 8002002:	4011      	ands	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d00a      	beq.n	800202c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	6852      	ldr	r2, [r2, #4]
 8002020:	493e      	ldr	r1, [pc, #248]	; (800211c <UART_AdvFeatureConfig+0x138>)
 8002022:	4011      	ands	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d00a      	beq.n	800204c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	6852      	ldr	r2, [r2, #4]
 8002040:	4937      	ldr	r1, [pc, #220]	; (8002120 <UART_AdvFeatureConfig+0x13c>)
 8002042:	4011      	ands	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2208      	movs	r2, #8
 8002052:	4013      	ands	r3, r2
 8002054:	d00a      	beq.n	800206c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	6852      	ldr	r2, [r2, #4]
 8002060:	4930      	ldr	r1, [pc, #192]	; (8002124 <UART_AdvFeatureConfig+0x140>)
 8002062:	4011      	ands	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2210      	movs	r2, #16
 8002072:	4013      	ands	r3, r2
 8002074:	d00a      	beq.n	800208c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	6892      	ldr	r2, [r2, #8]
 8002080:	4929      	ldr	r1, [pc, #164]	; (8002128 <UART_AdvFeatureConfig+0x144>)
 8002082:	4011      	ands	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2220      	movs	r2, #32
 8002092:	4013      	ands	r3, r2
 8002094:	d00a      	beq.n	80020ac <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	6892      	ldr	r2, [r2, #8]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <UART_AdvFeatureConfig+0x148>)
 80020a2:	4011      	ands	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d01b      	beq.n	80020ee <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6852      	ldr	r2, [r2, #4]
 80020c0:	491b      	ldr	r1, [pc, #108]	; (8002130 <UART_AdvFeatureConfig+0x14c>)
 80020c2:	4011      	ands	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	035b      	lsls	r3, r3, #13
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10a      	bne.n	80020ee <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <UART_AdvFeatureConfig+0x150>)
 80020e4:	4011      	ands	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	4013      	ands	r3, r2
 80020f6:	d00a      	beq.n	800210e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	490d      	ldr	r1, [pc, #52]	; (8002138 <UART_AdvFeatureConfig+0x154>)
 8002104:	4011      	ands	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
  }
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	fffdffff 	.word	0xfffdffff
 800211c:	fffeffff 	.word	0xfffeffff
 8002120:	fffbffff 	.word	0xfffbffff
 8002124:	ffff7fff 	.word	0xffff7fff
 8002128:	ffffefff 	.word	0xffffefff
 800212c:	ffffdfff 	.word	0xffffdfff
 8002130:	ffefffff 	.word	0xffefffff
 8002134:	ff9fffff 	.word	0xff9fffff
 8002138:	fff7ffff 	.word	0xfff7ffff

0800213c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2269      	movs	r2, #105	; 0x69
 800214e:	2120      	movs	r1, #32
 8002150:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	226a      	movs	r2, #106	; 0x6a
 8002156:	2120      	movs	r1, #32
 8002158:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2268      	movs	r2, #104	; 0x68
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217c:	e02b      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	3301      	adds	r3, #1
 8002182:	d028      	beq.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <UART_WaitOnFlagUntilTimeout+0x2e>
 800218a:	f7fe f88b 	bl	80002a4 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	1ad2      	subs	r2, r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	429a      	cmp	r2, r3
 8002198:	d91d      	bls.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <UART_WaitOnFlagUntilTimeout+0x94>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6892      	ldr	r2, [r2, #8]
 80021b4:	2101      	movs	r1, #1
 80021b6:	438a      	bics	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2269      	movs	r2, #105	; 0x69
 80021be:	2120      	movs	r1, #32
 80021c0:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	226a      	movs	r2, #106	; 0x6a
 80021c6:	2120      	movs	r1, #32
 80021c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2268      	movs	r2, #104	; 0x68
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e00f      	b.n	80021f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	425a      	negs	r2, r3
 80021e6:	4153      	adcs	r3, r2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	001a      	movs	r2, r3
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d0c4      	beq.n	800217e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	fffffe5f 	.word	0xfffffe5f

08002204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <MX_GPIO_Init+0xec>)
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <MX_GPIO_Init+0xec>)
 800220e:	6952      	ldr	r2, [r2, #20]
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0309      	lsls	r1, r1, #12
 8002214:	430a      	orrs	r2, r1
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <MX_GPIO_Init+0xec>)
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	031b      	lsls	r3, r3, #12
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002228:	4a31      	ldr	r2, [pc, #196]	; (80022f0 <MX_GPIO_Init+0xec>)
 800222a:	6952      	ldr	r2, [r2, #20]
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0349      	lsls	r1, r1, #13
 8002230:	430a      	orrs	r2, r1
 8002232:	615a      	str	r2, [r3, #20]
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	035b      	lsls	r3, r3, #13
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002246:	6952      	ldr	r2, [r2, #20]
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0289      	lsls	r1, r1, #10
 800224c:	430a      	orrs	r2, r1
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <MX_GPIO_Init+0xec>)
 8002262:	6952      	ldr	r2, [r2, #20]
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	02c9      	lsls	r1, r1, #11
 8002268:	430a      	orrs	r2, r1
 800226a:	615a      	str	r2, [r3, #20]
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <MX_GPIO_Init+0xec>)
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	02db      	lsls	r3, r3, #11
 8002274:	4013      	ands	r3, r2
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <MX_GPIO_Init+0xf0>)
 8002280:	2200      	movs	r2, #0
 8002282:	0019      	movs	r1, r3
 8002284:	f7fe fa86 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002288:	2390      	movs	r3, #144	; 0x90
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	2200      	movs	r2, #0
 800228e:	2101      	movs	r1, #1
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe fa7f 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002296:	2314      	movs	r3, #20
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	0192      	lsls	r2, r2, #6
 800229e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a0:	2314      	movs	r3, #20
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2314      	movs	r3, #20
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	2314      	movs	r3, #20
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <MX_GPIO_Init+0xf0>)
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f7fe f8f7 	bl	80004ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022be:	2314      	movs	r3, #20
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2314      	movs	r3, #20
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2314      	movs	r3, #20
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	2314      	movs	r3, #20
 80022d8:	18fa      	adds	r2, r7, r3
 80022da:	2390      	movs	r3, #144	; 0x90
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe f8e3 	bl	80004ac <HAL_GPIO_Init>

}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b00a      	add	sp, #40	; 0x28
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48000800 	.word	0x48000800

080022f8 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;
/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_I2C1_Init+0x58>)
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <MX_I2C1_Init+0x5c>)
 8002300:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x2000090E;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <MX_I2C1_Init+0x58>)
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <MX_I2C1_Init+0x60>)
 8002306:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_I2C1_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_I2C1_Init+0x58>)
 8002310:	2201      	movs	r2, #1
 8002312:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_I2C1_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <MX_I2C1_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_I2C1_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <MX_I2C1_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_I2C1_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <MX_I2C1_Init+0x58>)
 8002334:	0018      	movs	r0, r3
 8002336:	f7fe fa4b 	bl	80007d0 <HAL_I2C_Init>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d004      	beq.n	8002348 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <MX_I2C1_Init+0x64>)
 8002340:	2141      	movs	r1, #65	; 0x41
 8002342:	0018      	movs	r0, r3
 8002344:	f000 f986 	bl	8002654 <_Error_Handler>
  }

}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000024 	.word	0x20000024
 8002354:	40005400 	.word	0x40005400
 8002358:	2000090e 	.word	0x2000090e
 800235c:	080029dc 	.word	0x080029dc

08002360 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a13      	ldr	r2, [pc, #76]	; (80023bc <HAL_I2C_MspInit+0x5c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d120      	bne.n	80023b4 <HAL_I2C_MspInit+0x54>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002372:	230c      	movs	r3, #12
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	22c0      	movs	r2, #192	; 0xc0
 8002378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237a:	230c      	movs	r3, #12
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2212      	movs	r2, #18
 8002380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	230c      	movs	r3, #12
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2203      	movs	r2, #3
 8002388:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	230c      	movs	r3, #12
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <HAL_I2C_MspInit+0x60>)
 8002390:	0019      	movs	r1, r3
 8002392:	0010      	movs	r0, r2
 8002394:	f7fe f88a 	bl	80004ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_I2C_MspInit+0x64>)
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_I2C_MspInit+0x64>)
 800239c:	69d2      	ldr	r2, [r2, #28]
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0389      	lsls	r1, r1, #14
 80023a2:	430a      	orrs	r2, r1
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_I2C_MspInit+0x64>)
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	039b      	lsls	r3, r3, #14
 80023ae:	4013      	ands	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b008      	add	sp, #32
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40005400 	.word	0x40005400
 80023c0:	48000400 	.word	0x48000400
 80023c4:	40021000 	.word	0x40021000

080023c8 <conexaoBluetooth>:
void MX_GPIO_Init(void);
void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);

void conexaoBluetooth(int16_t *ax,int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t*)ax,sizeof(ax),100);
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	481c      	ldr	r0, [pc, #112]	; (800244c <conexaoBluetooth+0x84>)
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	2204      	movs	r2, #4
 80023de:	f7ff fbff 	bl	8001be0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80023e2:	2064      	movs	r0, #100	; 0x64
 80023e4:	f7fd ff68 	bl	80002b8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,(uint8_t*)ay,sizeof(ay),100);
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	4818      	ldr	r0, [pc, #96]	; (800244c <conexaoBluetooth+0x84>)
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	2204      	movs	r2, #4
 80023f0:	f7ff fbf6 	bl	8001be0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80023f4:	2064      	movs	r0, #100	; 0x64
 80023f6:	f7fd ff5f 	bl	80002b8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,(uint8_t*)az,sizeof(az),100);
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4813      	ldr	r0, [pc, #76]	; (800244c <conexaoBluetooth+0x84>)
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	2204      	movs	r2, #4
 8002402:	f7ff fbed 	bl	8001be0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f7fd ff56 	bl	80002b8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,(uint8_t*)gx,sizeof(gx),100);
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	480f      	ldr	r0, [pc, #60]	; (800244c <conexaoBluetooth+0x84>)
 8002410:	2364      	movs	r3, #100	; 0x64
 8002412:	2204      	movs	r2, #4
 8002414:	f7ff fbe4 	bl	8001be0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002418:	2064      	movs	r0, #100	; 0x64
 800241a:	f7fd ff4d 	bl	80002b8 <HAL_Delay>
 	  HAL_UART_Transmit(&huart1,(uint8_t*)gy,sizeof(gy),100);
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	480a      	ldr	r0, [pc, #40]	; (800244c <conexaoBluetooth+0x84>)
 8002422:	2364      	movs	r3, #100	; 0x64
 8002424:	2204      	movs	r2, #4
 8002426:	f7ff fbdb 	bl	8001be0 <HAL_UART_Transmit>
 	  HAL_Delay(100);
 800242a:	2064      	movs	r0, #100	; 0x64
 800242c:	f7fd ff44 	bl	80002b8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,(uint8_t*)gz,sizeof(gz),100);
 8002430:	69f9      	ldr	r1, [r7, #28]
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <conexaoBluetooth+0x84>)
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	2204      	movs	r2, #4
 8002438:	f7ff fbd2 	bl	8001be0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f7fd ff3b 	bl	80002b8 <HAL_Delay>
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	2000008c 	.word	0x2000008c

08002450 <main>:




int main(void)
{
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	b087      	sub	sp, #28
 8002454:	af02      	add	r7, sp, #8

  HAL_Init();
 8002456:	f7fd fee3 	bl	8000220 <HAL_Init>
  SystemClock_Config(); //configurar sistema de clock
 800245a:	f000 f859 	bl	8002510 <SystemClock_Config>

  //Inicializa todos os periféricos configurados
  MX_GPIO_Init();
 800245e:	f7ff fed1 	bl	8002204 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002462:	f7ff ff49 	bl	80022f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002466:	f000 f8bf 	bl	80025e8 <MX_USART1_UART_Init>

  while (1) //fica fazendo loop infinito / equivalente ao void loop() do arduino
  {

      SD_MPU6050_ReadAccelerometer(&hi2c1,&mpuCarrinho);
 800246a:	4a27      	ldr	r2, [pc, #156]	; (8002508 <main+0xb8>)
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <main+0xbc>)
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f8f5 	bl	8002660 <SD_MPU6050_ReadAccelerometer>
  	  int16_t a_x = mpuCarrinho.Accelerometer_X;
 8002476:	230e      	movs	r3, #14
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <main+0xb8>)
 800247c:	8992      	ldrh	r2, [r2, #12]
 800247e:	801a      	strh	r2, [r3, #0]
  	  int16_t a_y = mpuCarrinho.Accelerometer_Y;
 8002480:	230c      	movs	r3, #12
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <main+0xb8>)
 8002486:	89d2      	ldrh	r2, [r2, #14]
 8002488:	801a      	strh	r2, [r3, #0]
  	  int16_t a_z = mpuCarrinho.Accelerometer_Z;
 800248a:	230a      	movs	r3, #10
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <main+0xb8>)
 8002490:	8a12      	ldrh	r2, [r2, #16]
 8002492:	801a      	strh	r2, [r3, #0]

  	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpuCarrinho);
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <main+0xb8>)
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <main+0xbc>)
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f93c 	bl	8002718 <SD_MPU6050_ReadGyroscope>
  	  int16_t g_x = mpuCarrinho.Gyroscope_X;
 80024a0:	2308      	movs	r3, #8
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <main+0xb8>)
 80024a6:	8a52      	ldrh	r2, [r2, #18]
 80024a8:	801a      	strh	r2, [r3, #0]
  	  int16_t g_y = mpuCarrinho.Gyroscope_Y;
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <main+0xb8>)
 80024ae:	8a92      	ldrh	r2, [r2, #20]
 80024b0:	801a      	strh	r2, [r3, #0]
  	  int16_t g_z = mpuCarrinho.Gyroscope_Z;
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <main+0xb8>)
 80024b6:	8ad2      	ldrh	r2, [r2, #22]
 80024b8:	801a      	strh	r2, [r3, #0]

  	  conexaoBluetooth (a_x, a_y, a_z, g_x, g_y, g_z);
 80024ba:	230e      	movs	r3, #14
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	5e9b      	ldrsh	r3, [r3, r2]
 80024c2:	0018      	movs	r0, r3
 80024c4:	230c      	movs	r3, #12
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	5e9b      	ldrsh	r3, [r3, r2]
 80024cc:	0019      	movs	r1, r3
 80024ce:	230a      	movs	r3, #10
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	5e9b      	ldrsh	r3, [r3, r2]
 80024d6:	001c      	movs	r4, r3
 80024d8:	2308      	movs	r3, #8
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	5e9b      	ldrsh	r3, [r3, r2]
 80024e0:	001d      	movs	r5, r3
 80024e2:	1dbb      	adds	r3, r7, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	5e9b      	ldrsh	r3, [r3, r2]
 80024e8:	001a      	movs	r2, r3
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2600      	movs	r6, #0
 80024ee:	5f9b      	ldrsh	r3, [r3, r6]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	9200      	str	r2, [sp, #0]
 80024f4:	002b      	movs	r3, r5
 80024f6:	0022      	movs	r2, r4
 80024f8:	f7ff ff66 	bl	80023c8 <conexaoBluetooth>

      HAL_Delay(500);
 80024fc:	23fa      	movs	r3, #250	; 0xfa
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	0018      	movs	r0, r3
 8002502:	f7fd fed9 	bl	80002b8 <HAL_Delay>
  {
 8002506:	e7b0      	b.n	800246a <main+0x1a>
 8002508:	20000070 	.word	0x20000070
 800250c:	20000024 	.word	0x20000024

08002510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b094      	sub	sp, #80	; 0x50
 8002514:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002516:	2320      	movs	r3, #32
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800251e:	2320      	movs	r3, #32
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2201      	movs	r2, #1
 8002524:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002526:	2320      	movs	r3, #32
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2210      	movs	r2, #16
 800252c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800252e:	2320      	movs	r3, #32
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002536:	2320      	movs	r3, #32
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	0018      	movs	r0, r3
 800253c:	f7fe fdd0 	bl	80010e0 <HAL_RCC_OscConfig>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d004      	beq.n	800254e <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <SystemClock_Config+0xd4>)
 8002546:	2161      	movs	r1, #97	; 0x61
 8002548:	0018      	movs	r0, r3
 800254a:	f000 f883 	bl	8002654 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254e:	2310      	movs	r3, #16
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2207      	movs	r2, #7
 8002554:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002556:	2310      	movs	r3, #16
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255e:	2310      	movs	r3, #16
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002566:	2310      	movs	r3, #16
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800256e:	2310      	movs	r3, #16
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2100      	movs	r1, #0
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff f8a7 	bl	80016c8 <HAL_RCC_ClockConfig>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d004      	beq.n	8002588 <SystemClock_Config+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <SystemClock_Config+0xd4>)
 8002580:	216e      	movs	r1, #110	; 0x6e
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f866 	bl	8002654 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002588:	003b      	movs	r3, r7
 800258a:	2221      	movs	r2, #33	; 0x21
 800258c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800258e:	003b      	movs	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002594:	003b      	movs	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259a:	003b      	movs	r3, r7
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff f9f9 	bl	8001994 <HAL_RCCEx_PeriphCLKConfig>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d004      	beq.n	80025b0 <SystemClock_Config+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <SystemClock_Config+0xd4>)
 80025a8:	2176      	movs	r1, #118	; 0x76
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f852 	bl	8002654 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80025b0:	f7ff f9d0 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 80025b4:	0002      	movs	r2, r0
 80025b6:	23fa      	movs	r3, #250	; 0xfa
 80025b8:	0099      	lsls	r1, r3, #2
 80025ba:	0010      	movs	r0, r2
 80025bc:	f7fd fda4 	bl	8000108 <__udivsi3>
 80025c0:	0003      	movs	r3, r0
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fd ff3e 	bl	8000444 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f7fd ff49 	bl	8000460 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80025ce:	2301      	movs	r3, #1
 80025d0:	425b      	negs	r3, r3
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7fd ff1e 	bl	8000418 <HAL_NVIC_SetPriority>
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b014      	add	sp, #80	; 0x50
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	080029ec 	.word	0x080029ec

080025e8 <MX_USART1_UART_Init>:

}*/

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_USART1_UART_Init+0x60>)
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <MX_USART1_UART_Init+0x64>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <MX_USART1_UART_Init+0x60>)
 80025f4:	2296      	movs	r2, #150	; 0x96
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <MX_USART1_UART_Init+0x60>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_USART1_UART_Init+0x60>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <MX_USART1_UART_Init+0x60>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_USART1_UART_Init+0x60>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <MX_USART1_UART_Init+0x60>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_USART1_UART_Init+0x60>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <MX_USART1_UART_Init+0x60>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_USART1_UART_Init+0x60>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <MX_USART1_UART_Init+0x60>)
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff fa7f 	bl	8001b30 <HAL_UART_Init>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d004      	beq.n	8002640 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART1_UART_Init+0x68>)
 8002638:	21b7      	movs	r1, #183	; 0xb7
 800263a:	0018      	movs	r0, r3
 800263c:	f000 f80a 	bl	8002654 <_Error_Handler>
  }

}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	2000008c 	.word	0x2000008c
 800264c:	40013800 	.word	0x40013800
 8002650:	080029ec 	.word	0x080029ec

08002654 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800265e:	e7fe      	b.n	800265e <_Error_Handler+0xa>

08002660 <SD_MPU6050_ReadAccelerometer>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800266a:	230b      	movs	r3, #11
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	223b      	movs	r2, #59	; 0x3b
 8002670:	701a      	strb	r2, [r3, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002676:	2313      	movs	r3, #19
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	2313      	movs	r3, #19
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b299      	uxth	r1, r3
 800268a:	230b      	movs	r3, #11
 800268c:	18fa      	adds	r2, r7, r3
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	23fa      	movs	r3, #250	; 0xfa
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2301      	movs	r3, #1
 8002698:	f7fe f930 	bl	80008fc <HAL_I2C_Master_Transmit>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d1f0      	bne.n	8002682 <SD_MPU6050_ReadAccelerometer+0x22>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	2313      	movs	r3, #19
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b299      	uxth	r1, r3
 80026aa:	230c      	movs	r3, #12
 80026ac:	18fa      	adds	r2, r7, r3
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	23fa      	movs	r3, #250	; 0xfa
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2306      	movs	r3, #6
 80026b8:	f7fe fa34 	bl	8000b24 <HAL_I2C_Master_Receive>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d1f0      	bne.n	80026a2 <SD_MPU6050_ReadAccelerometer+0x42>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80026c0:	230c      	movs	r3, #12
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	230c      	movs	r3, #12
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80026da:	230c      	movs	r3, #12
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	230c      	movs	r3, #12
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 80026f4:	230c      	movs	r3, #12
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	791b      	ldrb	r3, [r3, #4]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	230c      	movs	r3, #12
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	795b      	ldrb	r3, [r3, #5]
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b21a      	sxth	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b006      	add	sp, #24
 8002716:	bd80      	pop	{r7, pc}

08002718 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8002722:	230b      	movs	r3, #11
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2243      	movs	r2, #67	; 0x43
 8002728:	701a      	strb	r2, [r3, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800272e:	2313      	movs	r3, #19
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	2313      	movs	r3, #19
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b299      	uxth	r1, r3
 8002742:	230b      	movs	r3, #11
 8002744:	18fa      	adds	r2, r7, r3
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	23fa      	movs	r3, #250	; 0xfa
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	f7fe f8d4 	bl	80008fc <HAL_I2C_Master_Transmit>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d1f0      	bne.n	800273a <SD_MPU6050_ReadGyroscope+0x22>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	2313      	movs	r3, #19
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b299      	uxth	r1, r3
 8002762:	230c      	movs	r3, #12
 8002764:	18fa      	adds	r2, r7, r3
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	23fa      	movs	r3, #250	; 0xfa
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2306      	movs	r3, #6
 8002770:	f7fe f9d8 	bl	8000b24 <HAL_I2C_Master_Receive>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d1f0      	bne.n	800275a <SD_MPU6050_ReadGyroscope+0x42>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8002778:	230c      	movs	r3, #12
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	b21a      	sxth	r2, r3
 8002782:	230c      	movs	r3, #12
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	785b      	ldrb	r3, [r3, #1]
 8002788:	b21b      	sxth	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b21a      	sxth	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8002792:	230c      	movs	r3, #12
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	230c      	movs	r3, #12
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 80027ac:	230c      	movs	r3, #12
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	230c      	movs	r3, #12
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b006      	add	sp, #24
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_MspInit>:
  }

}*/

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_UART_MspInit+0x70>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d129      	bne.n	8002836 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_UART_MspInit+0x74>)
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_UART_MspInit+0x74>)
 80027e6:	6992      	ldr	r2, [r2, #24]
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	01c9      	lsls	r1, r1, #7
 80027ec:	430a      	orrs	r2, r1
 80027ee:	619a      	str	r2, [r3, #24]
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_UART_MspInit+0x74>)
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027fe:	230c      	movs	r3, #12
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	230c      	movs	r3, #12
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2202      	movs	r2, #2
 800280c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	230c      	movs	r3, #12
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002816:	230c      	movs	r3, #12
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2203      	movs	r2, #3
 800281c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800281e:	230c      	movs	r3, #12
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2201      	movs	r2, #1
 8002824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	230c      	movs	r3, #12
 8002828:	18fa      	adds	r2, r7, r3
 800282a:	2390      	movs	r3, #144	; 0x90
 800282c:	05db      	lsls	r3, r3, #23
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f7fd fe3b 	bl	80004ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b008      	add	sp, #32
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40013800 	.word	0x40013800
 8002844:	40021000 	.word	0x40021000

08002848 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <HardFault_Handler+0x4>

08002858 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002870:	f7fd fd0c 	bl	800028c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002874:	f7fd fe0e 	bl	8000494 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <SystemInit+0x70>)
 8002886:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <SystemInit+0x70>)
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <SystemInit+0x70>)
 8002892:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <SystemInit+0x70>)
 8002894:	6852      	ldr	r2, [r2, #4]
 8002896:	4917      	ldr	r1, [pc, #92]	; (80028f4 <SystemInit+0x74>)
 8002898:	400a      	ands	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <SystemInit+0x70>)
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <SystemInit+0x70>)
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	4915      	ldr	r1, [pc, #84]	; (80028f8 <SystemInit+0x78>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <SystemInit+0x70>)
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <SystemInit+0x70>)
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4913      	ldr	r1, [pc, #76]	; (80028fc <SystemInit+0x7c>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <SystemInit+0x70>)
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <SystemInit+0x70>)
 80028b8:	6852      	ldr	r2, [r2, #4]
 80028ba:	4911      	ldr	r1, [pc, #68]	; (8002900 <SystemInit+0x80>)
 80028bc:	400a      	ands	r2, r1
 80028be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <SystemInit+0x70>)
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <SystemInit+0x70>)
 80028c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028c6:	210f      	movs	r1, #15
 80028c8:	438a      	bics	r2, r1
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <SystemInit+0x70>)
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <SystemInit+0x70>)
 80028d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d2:	490c      	ldr	r1, [pc, #48]	; (8002904 <SystemInit+0x84>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <SystemInit+0x70>)
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <SystemInit+0x70>)
 80028dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80028e4:	4b02      	ldr	r3, [pc, #8]	; (80028f0 <SystemInit+0x70>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]

}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08ffb80c 	.word	0x08ffb80c
 80028f8:	fef6ffff 	.word	0xfef6ffff
 80028fc:	fffbffff 	.word	0xfffbffff
 8002900:	ffc0ffff 	.word	0xffc0ffff
 8002904:	fffffeec 	.word	0xfffffeec

08002908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800290a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <LoopForever+0x6>)
  ldr r1, =_edata
 800290e:	490e      	ldr	r1, [pc, #56]	; (8002948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <LoopForever+0xe>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002924:	4c0b      	ldr	r4, [pc, #44]	; (8002954 <LoopForever+0x16>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002932:	f7ff ffa5 	bl	8002880 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002936:	f000 f811 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800293a:	f7ff fd89 	bl	8002450 <main>

0800293e <LoopForever>:

LoopForever:
    b LoopForever
 800293e:	e7fe      	b.n	800293e <LoopForever>
  ldr   r0, =_estack
 8002940:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002948:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800294c:	08002a1c 	.word	0x08002a1c
  ldr r2, =_sbss
 8002950:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002954:	200000fc 	.word	0x200000fc

08002958 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC1_IRQHandler>
	...

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4d0c      	ldr	r5, [pc, #48]	; (8002994 <__libc_init_array+0x38>)
 8002962:	4c0d      	ldr	r4, [pc, #52]	; (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	2600      	movs	r6, #0
 800296e:	f000 f819 	bl	80029a4 <_init>
 8002972:	4d0a      	ldr	r5, [pc, #40]	; (800299c <__libc_init_array+0x40>)
 8002974:	4c0a      	ldr	r4, [pc, #40]	; (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	00b3      	lsls	r3, r6, #2
 8002982:	58eb      	ldr	r3, [r5, r3]
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	00b3      	lsls	r3, r6, #2
 800298c:	58eb      	ldr	r3, [r5, r3]
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	08002a14 	.word	0x08002a14
 8002998:	08002a14 	.word	0x08002a14
 800299c:	08002a14 	.word	0x08002a14
 80029a0:	08002a18 	.word	0x08002a18

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
